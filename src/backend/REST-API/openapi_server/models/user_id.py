from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util
from openapi_server.logger import logger


class UserId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uid=None, id=None):  # noqa: E501
        """UserId - a model defined in OpenAPI

        :param uid: The uid of this UserId.  # noqa: E501
        :type uid: int
        :param id: The id of this UserId.  # noqa: E501
        :type id: int
        """
        logger.debug(f"models/user_id.py: UserId-Objekt erstellt mit uid={uid}, id={id}")
        self.openapi_types = {
            'uid': int,
            'id': int
        }

        self.attribute_map = {
            'uid': 'uid',
            'id': 'id'
        }

        self._uid = uid
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'UserId':
        """Returns the dict as a model

        :param dikt: A dict.
        :type dikt: dict
        :return: The UserId of this UserId.  # noqa: E501
        :rtype: UserId
        """
        logger.debug(f"models/user_id.py: UserId.from_dict() aufgerufen mit: {dikt}")
        user_id = util.deserialize_model(dikt, cls)
        logger.debug(f"models/user_id.py: UserId-Objekt aus Dictionary erstellt: uid={user_id.uid}, id={user_id.id}")
        return user_id

    @property
    def uid(self) -> int:
        """Gets the uid of this UserId.


        :return: The uid of this UserId.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid: int):
        """Sets the uid of this UserId.


        :param uid: The uid of this UserId.
        :type uid: int
        """
        if uid is None:
            raise ValueError("Ungültiger Wert für `uid`, darf nicht `None` sein")  # noqa: E501
        if uid is not None and uid < 1:  # noqa: E501
            raise ValueError("Ungültiger Wert für `uid`, muss größer oder gleich 1 sein")  # noqa: E501

        self._uid = uid

    @property
    def id(self) -> int:
        """Gets the id of this UserId.


        :return: The id of this UserId.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UserId.


        :param id: The id of this UserId.
        :type id: int
        """
        if id is not None and id < 1:  # noqa: E501
            raise ValueError("Ungültiger Wert für `id`, muss größer oder gleich 1 sein")  # noqa: E501

        self._id = id

from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, password=None, coins=None, admin=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param coins: The coins of this User.  # noqa: E501
        :type coins: int
        :param admin: The admin of this User.  # noqa: E501
        :type admin: bool
        """
        self.openapi_types = {
            'username': str,
            'password': str,
            'coins': int,
            'admin': bool
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'coins': 'coins',
            'admin': 'admin'
        }

        self._username = username
        self._password = password
        self._coins = coins
        self._admin = admin

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def coins(self) -> int:
        """Gets the coins of this User.


        :return: The coins of this User.
        :rtype: int
        """
        return self._coins

    @coins.setter
    def coins(self, coins: int):
        """Sets the coins of this User.


        :param coins: The coins of this User.
        :type coins: int
        """
        if coins is not None and coins < 0:  # noqa: E501
            raise ValueError("Invalid value for `coins`, must be a value greater than or equal to `0`")  # noqa: E501

        self._coins = coins

    @property
    def admin(self) -> bool:
        """Gets the admin of this User.


        :return: The admin of this User.
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin: bool):
        """Sets the admin of this User.


        :param admin: The admin of this User.
        :type admin: bool
        """

        self._admin = admin
